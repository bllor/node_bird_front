spa는 첫 로딩 시 프론트 서버에서 자바스크립트 등의 파일을 받은 다음,
다음 요청부터는 백엔드 서버에 요청을 한다.

리액트를 쓰는 곳은 고객들에게 빠르게 인터렉션이 필요할 때 사용된다.
ssr: 첫 방문만 서버들을 거쳐서 정보를 받아오지만, 그 다음부터는 브라우저에서 백엔드 서버로 데이터 요청을 한다.

넥스트는 pages 폴더 안에 있는 파일들은 전부다 코드 스플리팅을 해준다.

넥스트 서버가 실행된 다음에 페이지를 추가할 경우, 페이지가 추가가 안되는 경우가 있는데,
이럴 때는 서버를 껐다 켜면 된다.

next 에서는 리액트 라우터 말고 Link를 사용한다.

css를 배치할 때는 가로를 먼저 나누고, 세로를 나누면 된다

반응형 디자인을 할 때는 모바일,테블릿,데스트탑 순서로 작업해야 한다.

antd는 24개의 칼럼으로 되어 있고,
xs:모바일 sm:태블릿 md:작은데스크탑
<Col xs={24} md={6} />
모바일일 때는 100%를 차지하고, 화면이 커질 경우 해당 화면의 25%를 차지한다는 코드
합쳐서 24이하면 같은 줄에서 나오고,
24가 넘을 경우 다른 줄에 나온다.
gutter : 컬럼 사이의 간격

_blank로 창을 열 때 보안의 위협이 있으므로, noreferrer ,nopener를 추가해준다.
 target="_blank"
            rel="noreferrer nopener"

발생하는 오류는 블로그에 작성하는 것이 좋다.

컴포넌트에 props로 넘겨주는 함수는 useCallback을 사용해야 최적화가 된다.

<div style={{ marginTop: "18px" }}>
자바스크립트에서 객체는 비교할 때마다 false가 된다.
위의 태그처럼 style={{}}을 객체로 넣을 경우, 리액트가 리랜더링 될 때마다 false가 되어 해당 div내의 부분을 리랜더링하게 된다.

ant design의 Input.Search를 스타일 컴포넌트로 만들어서 css를 적용하고 싶으면,
const SearchInput = styled(Input.Search)`
위의 코드와 같이 ()안에 넣어주고 작업하면 된다.
스타일 컴포넌트로 바꾸고 싶지 않으면, useMemo를 사용한다.
const Newstyle = UseMemo(()=>({marginTop:18}),[]);
이렇게 하고, <div style={Newstyle}> 이렇게 넣으면 된다.

함수형 컴포넌트에서 리랜더링 될 때는 함수 내의 모든 것이 재실행 된다.
useCallback, useMemo 는 캐싱이라서 배열 부분이 변경되지 않으면 재실행 되지 않는다.
return부분 중에 바뀌는 부분이 있으면 해당 부분만 재실행 된다.


리액트에서 배열로 jsx를 사용하려면 key를 붙혀주어야 한다.

noreferrer : 이전페이지를 알려주지 않는 것
nopener : 어디서 열었는지 안알려주는 것 

리랜더링 되는 것이 성능이 나빠지는 것은 아닌데, 화면을 다시 그리고 함수가 다시 실행되면 성능에 이슈를 줄 수 있다.

제이쿼리를 사용할 때는 리액트와 분리하여 사용해야 한다.

코드가 100줄이 넘어가면 컴포넌트를 분리하기?

커스텀 훅: 반복문, 조건문, 함수 안에서는 사용 못하고, 컴포넌트 안에서만 사용 가능하다.


const onSubmit = useCallback(
  (e) => {
    e.preventDefault(); // 기본 동작 방지
    console.log("passwordCheck 값:", passwordCheck); // 디버깅용
    if (password !== passwordCheck) {
      console.log("비밀번호 불일치:", password, "|", passwordCheck);
      return setPasswordError(true);
    }
    if (!term) {
      return setTermError(true);
    }
    console.log("회원가입 성공:", { id, nickName, password });
  },
  [password]
)
해당 함수를 사용할 때 passwordCheck값이 pass와 같은데도 불구하고,
일치하지 않는다고 하고, console.log에 값이 출력되지 않는 문제가 있었다.
useCallback은 의존성 배열에 값이 없을 경우, 첫 로딩시의 값을 가지고 사용하는데,
passwordCheck는 의존성 배열에 없으므로, 첫로딩 시 값인 ''이 나왔던 것이다.
그래서 아래와 같이 수정을 하니 함수가 작동을 잘하는 것을 확인할 수 있었다.

const onSubmit = useCallback(
  (e) => {
    e.preventDefault(); // 기본 동작 방지
    console.log("passwordCheck 값:", passwordCheck); // 디버깅용
    if (password !== passwordCheck) {
      console.log("비밀번호 불일치:", password, "|", passwordCheck);
      return setPasswordError(true);
    }
    if (!term) {
      return setTermError(true);
    }
    console.log("회원가입 성공:", { id, nickName, password });
  },
  [password, passwordCheck, term]
)

리덕스는 코드를 입력해야하는 양이 많아서 생산성이 좋지 않다.
리덕스를 사용하는 이유는 여러 컴포넌트들에서 공통으로 사용되는 경우,
중앙데이터 저장소를 만들어서 사용하는데, 리덕스가 중앙데이터 역할을 한다.
리덕스는 원리가 간단하고, 추적하기 쉽다. 코드 입력량이 많다.
컨텍스트 api에서는 비동기 처리를 하기 힘들고 직접 구현해야 한다.

리덕스
리덕스에서는 데이터를 변경하려면 action을 만들어야함 (type은 action의 이름)
액션을 dispatch하면 중앙저장소인 redux의 데이터가 변경된다.
액션이 dispatch되면 reducer에서 액션에 따라 실행을 다르게 한다.
데이터를 변경할 때마다 action을 만들어주고, reducer에 어떻게 처리할지 적어줘야해서 코드량이 많다.

*자바스크립트의 불변성
{} ==={} //false
const a  = {}
b = a
a===b// true

리듀서에서 객체를 새로 만들어서 보내주는데 그 이유는?
기록을 남기기 위해서,
const prev = {name:'dd'}
const next = {name:'aa'}
이렇게 두 개는 서로 다르다.
const next = prev;
next.name ='aa';
이렇게 하면 prev가 'aa'가 되므로, 비교할 데이터가 없어진다.

return{...state, name:action.data}
...state를 하는 이유는 메모리를 아끼기 위해서.
변경되지 않을 때도 새로운 객체를 계속 생성하여 메모리 소비가 있다.

store는 저장소와 reducer를 포함한 것

redux dev tools에서 diff는 어떻게 변했는지 알 수 있게 해줌
버튼 클릭 시 상태변경도 가능하므로 편함


시퀄라이즈에서 정보가 겹칠 경우, 합쳐서 주는데 대문자로 내보내줌

{mainPosts.map((post,index) => (
        <PostCard></PostCard>
      ))}
다음과 같이 배열을 map으로 사용할 때 index를 키로 사용하는 것은 좋지 않다.
반복되는 것들이 지워지거나, 순서가 변경되거나 추가가 될 때는 사용하면 안좋다.
반복문이 안바뀔 때는 사용해도 됨


컴포넌트로 분리할 때는 덩어리를 분리하거나, map안에 있는 애들을 분리하는 것이 좋다.

renderItem={(item) => {
              <li>
                <Comment
                  author={item.User.nickName}
                  avatar={<Avatar>{item.User.nickName}</Avatar>}
                  content={item.content}
                ></Comment>
              </li>
            }}
다음과 같이 사용할 때 리턴 되지 않는 이슈가 있었다.
지피티에게 물어보니 
renderItem={(item) => (
              <li>
                <Comment
                  author={item.User.nickName}
                  avatar={<Avatar>{item.User.nickName}</Avatar>}
                  content={item.content}
                ></Comment>
              </li>
            )}            
다음과 같이 사용해야 한다고 했다.
()=>() 와 ()=>{}는 비슷하게 생긴 것 같은데 왜 동작하는 것이 다를까?
()=>()
특징: 중괄호({}) 대신 소괄호(())를 사용하면, 화살표 함수는 중괄호 없이 표현식(expression)을 평가하고 그 결과를 자동으로 반환합니다.
주로 사용: 함수가 단일 표현식만 반환하는 경우
()=>{}
특징: 중괄호({})를 사용하면 함수 본문을 명시적으로 정의하고, 반환값을 주려면 return 키워드를 써야 합니다.
주로 사용: 복잡한 로직이 있는 함수.

const Overlay = styled.div₩₩
위와 같은 형태로 스타일컴포넌트를 사용하는데, 이는 자바스크립트의 문법이다.
함수를 불러오는 방법 중에 ₩₩으로 불러오는 방법이 있기 때문.

이미 정해져있는 클래스명에 있는 css를 수정하려면 글로벌스타일로 적용해준다.

css에 transform이 있는 경우, position:fixed를 정확히 잡지 못한다.


redux-thunk : 리덕스가 비동기 처리를 할 수 있게 도와주는 미들웨어
thunk를 사용하는 이유는 대부분의 요청이 비동기로 요청이 되는데, 비동기 요청 크리에이터를 하나 추가해줄 수 있기 때문에 사용
(한 번에 dispatch를 여러번 해준다)

saga를 쓰는 이유는 delay를 해주거나,실수로 클릭을 두번할 경우, 마지막 요청만 보내준다
스로틀을 적용하여 일초에 몇회 이상 요청할 경우, 다음 요청들은 다 차단하는 것을 통해 조금 더 안정적으로 구현할 수 있게 한다.


제너레이터 : function*
제너레이터뒤에.next()를 붙혀야 실행이 된다.

yield라는 개념이 나오는데, Yield는 중단점 역할을 한다.
처음 실행 시 yield 있는 곳 까지 실행이 된다.
done이 true가 되면 제너레이터가 끝나는 지점이다.

쓰로틀링과 디바운싱의 차이
--> 제로초 사이트에서 보기

인풋창에 글을 입력했는데 object object로 나오는 경우는 문자열이 객체로 변환되고 있다는 뜻.
  const [text, onChangeText, setText] = useState("");

 <Input.TextArea
        value={text}
        onChange={onChangeText}
        maxLength={140}
        placeholder="어떤 신기한 일이 있었나요?"
      />

더미데이터를 만들 때 id로 shortid 라이브러리나 faker라이브러리를 사용한다.


게시글을 늘릴 경우, postReducer에 저장이되고, 게시글 수가 userReducer에 반영이 되어야 하는데 어떻게 하면될까?
게시글이 추가되면 userReducer에 반영되는 액션을 추가하면 된다.

불변성을 지키며 데이터를 편하게 추가하기 위해서 immer를 사용한다.

같은 시간안에 더 많은 일을 할 수 있어야 가치가 올라간다.

redux toolkit -- 리덕스 팀에서 만듬
스위치를 줄일 수 있게 만들어줌

게시글이 너무 많아지면 메모리가 터져버릴 수 있는데, 이럴 경우 리액트 버츄얼라이즈드리스트 라이브러리를 이용하면
수백개의 게시글 중에 화면에는 몇개만 보이고 나머지는 메모리에 가지고 있는다

----------------------------------------------------------------------------------------------------
리덕스와 리덕스 사가의 흐름

리덕스는 데이터 중앙저장소 역할을 한다.
다른 컴포넌트들에서 데이터를 사용할 수 있게 만들어 준다.
리덕스 사가는 리덕스 미들웨어 중 하나로, 비동기 작업을 관리하기 위해 사용됩니다.

redux/index.js

const RootReducer = combineReducer({ // combineReducer로 인하여 리듀서를 여러개 사용할 수 있다.
  idex: (state={},action)=>{ 인덱스는 next.js의 서버상태를 클라이언트 상태와 병합하기 위해서 사용된다.
    switch (action.type){
      case HYDRATE: //next.js에서는 ssr시 서버에서 생성된 상태를 클라이언트의 redux스토어로 전달해야하는데,
      return{       //이과정에서 서버상태와 클라이언트 상태를 병합하기 위해 HYDRATE액션을 디스패치 한다.
        ...state,
        ...action.payload //서버에서 생성된 상태가 담겨있다.
      };
      default:
      return state;
    }
  },
  user,
  post
})

store/configureStore.js에서
const configureStore = (context) => {
  console.log(context);
  const sagaMiddleware = createSagaMiddleware();
  const middlewares = [sagaMiddleware];
  const enhancer =
    process.env.NODE_ENV === "production"
      ? compose(applyMiddleware(...middlewares))
      : composeWithDevTools(applyMiddleware(...middlewares));
  const store = legacy_createStore(RootReducer, enhancer);
  store.sagaTask = sagaMiddleware.run(rootSaga);
  return store;
};
store에 사가를 추가함으로써 리듀서와 같이 사용할 수 있다.

ex) 게시글을 작성한다고 했을 때
게시글 작성 버튼 클릭 시
const onSubmit = useCallback(() => {
    dispatch(addPost(text));
    // setText("");// 서버에서 코멘트 작성 완료 신호가 올 때  초기화할 수 있게 만들어야 한다.
  }, [text]);
  함수가 호출이 되는데
  dispatch는 redux에게 액션을 전달할 때 사용하는 함수이다.
  
export const addPost = (data) => ({
  type: ADD_POST_REQUEST,
  data,
});
사가 미들웨어가 디스패치된 액션을 감지하여, 사가에서도 특정 액션을 실행시켜준다. 
export default function* rootSaga() {
  //all은 배열 내의 모든 제너레이터를 실행시켜 준다.

  yield all([fork(postSaga), fork(userSaga)]);
}
export default function* postSaga() {
  yield all([
    fork(watchAddPost),
    fork(watchLoadPost),
    fork(watchAddComment),
    fork(watchRemovePost),
  ]);
}
function* watchAddPost() {
  yield takeLatest(ADD_POST_REQUEST, addPost);
}

function addPostAPI(data) {
  return "요청";
}
function* addPost(action) {
  try {
    // const result = yield call(addPostAPI, action.data);
    yield delay(1000);
    const id = shortid.generate();
    yield put({
      type: ADD_POST_SUCCESS,
      data: { id: id, content: action.data },
    });
    yield put({
      type: ADD_POST_TO_ME,
      data: id,
    });
  } catch (err) {
    yield put({
      type: "ADD_POST_FAILURE",
      data: err.response.data,
    });
  }
}
addPost 제네레이터가 실행이 되고, yield put을 통해 리덕스에 액션을 디스패치(전달) 한다.
(put을 사용하면 명시적으로 dispatch를 호출하지 않아도, redux-saga가 미들웨어로서 이를 처리하고 redux store로 보낸다)
(store.sagaTask = sagaMiddleware.run(rootSaga); // 루트 사가 실행 이 설정으로 인해 put이 되었을 때 redux store로 전달할 수 있다.)

const post = (state = initialState, action) => {
  return produce(state, (draft) => {
  case ADD_POST_REQUEST:
        draft.addPostLoading = true;
        draft.addPostDone = false;
        draft.addPostError = null;
        break;
      case ADD_POST_SUCCESS:
        draft.addPostLoading = false;
        draft.addPostDone = true;
        draft.mainPosts.unshift(dummy_post(action.data));
        break;
      case ADD_POST_FAILURE:
        draft.addPostLoading = false;
        draft.addPostError = action.error;
        break;
  })}

  case ADD_POST_SUCCESS:
        draft.addPostLoading = false;
        draft.addPostDone = true;
        draft.mainPosts.unshift(dummy_post(action.data));
        break;
  성공할 경우
  state.mainPosts에 dummy_post의 값이 들어가고,
mainPosts를 사용한 곳에서는 추가된 값을 볼 수 있다.

*draft는 immer라이브러리의 일종으로, 불변성을 유지하면서 직관적으로 업데이트를 할 수 있게 도와주는 라이브러리이다.
immer라이브러리 없이 불변성을 유지하려면
case ADD_POST_SUCCESS:
  return {
    ...state, // 기존 상태를 복제
    addPostLoading: false,
    addPostDone: true,
    mainPosts: [ // 기존 mainPosts 배열을 복제한 뒤 새 값 추가
      dummy_post(action.data),
      ...state.mainPosts,
    ],
  };
위의 코드와 같이 사용을 해야하지만,
immer라이브러리를 사용하면
draft.mainPosts.unshift(dummy_post(action.data));
처럼 짧게 사용할 수 있다.

*
불변성은 데이터가 생성된 후 변경되지 않는 특성을 의미합니다. 
즉, 상태나 데이터 구조를 직접 변경하는 대신, 변경된 새로운 값을 만들어내는 방식입니다
불변성을 유지할 경우 변화된 부분만 리랜더링 해줘서 상태 관리가 수월하고, 성능최적화에 유리하다